#+title: Business Usecase and System Usecase

SmartDox DSLを使って記述したモデルの
サンプル文書です。

文書でサンプルモデルの定義をします。
本来は文書中の仕様記述の文書は
定義するモデルに対するものになります。

しかし、この文書ではSmartDox DSLの記述例として
SmartDox DSL文法の説明を記述することにします。

* サンプル文書の目的

このサンプル文書はアウトラインと表を中心にしてビジネス・ユースケースから
ドメインモデルのクラス定義までを記述するサンプルです。

以下の機能も使用しています。

- 購入のアイテムを合成部品に対する多重参照で表現しています。
- トレイトを用いています。

* Business Usecase

ビジネス・プロセスはビジネス・プロセスを構成する部品で、
ビジネス・システム上に存在する物語です。

ビジネス・ユースケースの命名には制約はありませんが、
他のモデルと名前が重なりやすいのと、文章内に埋め込んだ時に
視認性が高まるので必要に応じて接頭辞「BU」を用いると
よいでしょう。

** BU商品を購入する

#+caption: 性質一覧
| 項目   | 値                              |
|--------+---------------------------------|
| 目標   | 顧客が商品をWebサイトで購入する |
| 主役   | 顧客                            |
| 相手役 | Webサイト                       |
| 脇役   |                                 |

#+caption: 事前条件
| 名前 | 条件 |
|------+------|
|      |      |

#+caption: 事後条件
| 名前 | 条件 |
|------+------|
|      |      |

#+caption: 関連一覧
| 名前 | CRUD |
|------+------|
|      | 作成 |
|      | 参照 |
|      | 更新 |
|      | 削除 |

*** Scenario

シナリオは以下のようにリスト形式で記述していきます。

- RU商品を購入する
- BT顧客に確認メールを送信する
- DE管理者にメールを送信
- BU他のビジネス・ユースケース
- 管理者がログを確認する

リストに記述できるのは、(1)ユースケース名、(2)ビジネス・タスク名、(3)ドメイン・イベント名、
(4)ビジネス・ユースケース名、(4)フリーフォーマットの文字列のいずれかです。

(3)ドメイン・イベントは可能なかぎりユースケース側で使うのが望ましいです。
ビジネス・ユースケースのみをラフに作るときに使用するとよいでしょう。

** BU顧客の対応をする

ビジネス・ユースケース「BU顧客の対応をする」は
特殊なビジネス・ユースケースの例です。

複数のビジネス・ユースケースを
ある目標に従って集めるという集約または合成を指定することができます。

#+caption: 特性一覧
| 特性 | 名前           | 型               |
|------+----------------+------------------|
| 集約 | 商品を購入する | BU商品を購入する |

*** Composition

**** BU商品を販売する

省略

* Business Task

共通部品となる定型的な作業はビジネス・タスクとして
モデル化します。
複数のビジネス・ユースケースのシナリオからの参照として
使用されることを想定しています。(include関係)

ビジネス・タスクの命名には制約はありませんが、
他のモデルと名前が重なりやすいのと、文章内に埋め込んだ時に
視認性が高まるので必要に応じて接頭辞「BT」を用いると
よいでしょう。

ビジネス・タスクはビジネス・ユースケースを補完するモデルなので
作成は必須ではありません。

** BT顧客に確認メールを送信する

#+caption: 性質一覧
| 項目   | 値        |
|--------+-----------|
| 主役   | Webサイト |
| 相手役 | 顧客      |
| 脇役   |           |

#+caption: 事前条件
| 名前 | 条件 |
|------+------|
|      |      |

#+caption: 事後条件
| 名前 | 条件 |
|------+------|
|      |      |

#+caption: 関連一覧
| 名前 | 型 | CRUD | 事前条件 | 事後条件 |
|------+----+------+----------+----------|
|      |    | 作成 |          |          |
|      |    | 参照 |          |          |
|      |    | 更新 |          |          |
|      |    | 削除 |          |          |

*** Scenario

シナリオは以下のようにリスト形式で記述していきます。

- RU確認メールを送信する

リストに記述できるのは、(1)ユースケース名、(2)ドメイン・イベント名、
(3)ビジネス・タスク名、(4)フリーフォーマットの文字列のいずれかです。

* Usecase

ユースケースは、利用者などのアクターがシステムを利用する利用事例といった、
システム上での物語です。

ユースケースの命名には制約はありませんが、
他のモデルと名前が重なりやすいのと、文章内に埋め込んだ時に
視認性が高まるので必要に応じて接頭辞「RU」を用いると
よいでしょう。

** RU商品を購入する

#+caption: 性質一覧
| 項目   | 値        |
|--------+-----------|
| 主役   | Webサイト |
| 相手役 | 顧客      |
| 脇役   |           |

#+caption: 事前条件
| 名前 | 条件 |
|------+------|
|      |      |

#+caption: 事後条件
| 名前 | 条件 |
|------+------|
|      |      |

*** Scenario

シナリオは以下のようにリスト形式で記述していきます。

- RT商品を購入する

リストに記述できるのは、(1)ユースケース名、(2)ドメイン・イベント名、
(3)フリーフォーマットの文字列のいずれかです。

(1)ユースケース名の場合は対応ユースケースに対してinclude関係になります。

** RU確認メールを送信する

省略

* Task

共通部品となる定型的な作業はタスクとして
モデル化します。
複数のユースケースのシナリオからの参照として
使用されることを想定しています。(include関係)

タスクの命名には制約はありませんが、
他のモデルと名前が重なりやすいのと、文章内に埋め込んだ時に
視認性が高まるので必要に応じて接頭辞「RT」を用いると
よいでしょう。

** RT商品を購入する

#+caption: 性質一覧
| 項目   | 値            |
|--------+---------------|
| 主役   | よろず商会Web |
| 相手役 | 顧客          |

#+caption: 事前条件
| 名前 | 条件 |
|------+------|
|      |      |

#+caption: 事後条件
| 名前 | 条件 |
|------+------|
|      |      |

*** Scenario

シナリオは以下のようにリスト形式で記述していきます。

- RU確認メールを送信する

リストに記述できるのは、(1)ドメイン・イベント名
(2)タスク名、(4)フリーフォーマットの文字列のいずれかです。

* Trait

** Master

** Transaction

* Business Actor

システム化対象ではないビジネス領域のアクターは
ビジネス・アクターとしてモデル化します。

** よろず商会Web

よろず商会Webは、本モデルの対象となるアクターですが、
逆によろず商会Webシステム内ではエンティティとして管理はされません。
いわゆるSuD(System under Discussion)に分類されるアクターです。

SimpleModelerでは、ビジネス・アクターとしてモデル化します。

* Actor

** 顧客

#+caption: 性質一覧
| 項目     | 値     |
|----------+--------|
| トレイト | Master |

#+caption: 属性一覧
| 名前   | 型     | カラム  | SQL型        |
|--------+--------+---------+--------------|
| 顧客ID | token  | ID      | CHAR(16)     |
| 名前   | token  | NAME    | VARCHAR(64)  |
| 住所   | string | ADDRESS | VARCHAR(256) |

* Resource

** 商品

#+caption: 性質一覧
| 項目     | 値     |
|----------+--------|
| トレイト | Master |

#+caption: 属性一覧
| 名前   | 型    | ID | カラム | SQL型       |
|--------+-------+----+--------+-------------|
| 商品ID | token | ○ | ID     | CHAR(16)    |
| 名前   | token |    | NAME   | VARCHAR(32) |
| 定価   | money |    | PRICE  | LONG        |

* Event

** 購入

#+caption: 性質一覧
| 項目     | 値          |
|----------+-------------|
| トレイト | Transaction |

#+caption: 特性一覧
| 特性 | 名前   | 型    | 多重度 | 派生        | カラム      | SQL型    |
|------+--------+-------+--------+-------------+-------------+----------|
| ID   | 購入ID | token |        |             | ID          | CHAR(16) |
| 属性 | 日付   | date  |        |             | DATE        | DATE     |
| 関連 | 顧客   | 顧客  |      1 |             | CUSTOMER_ID | CHAR(16) |
| 属性 | 顧客名 | token |        | 顧客.名前   |             |          |

*** Composition

購入において購入した商品と個数の組を表現する
エンティティ「購入商品」を定義します。

**** 購入商品+

購入から購入商品への多重度は、節名「購入商品+」の「+」で記述しています。

多重度は「性質一覧」、「Properties」の表で記述する方法も可能です。

エンティティに対する合成は以下のいずれかのモデルになります。

- 登録済みのエンティティが存在しない場合 → エンティティの合成部品(ステレオタイプpart)
- すでにエンティティが登録済みの場合 → 各種エンティティ

エンティティの合成部品となった場合、RDBMSでは関連エンティティとして
実装されます。
このためIDの暗黙解決や自動生成は行われません。

#+caption: 特性一覧
| 特性 | 名前   | 型    | 多重度 | 派生        | カラム | SQL型 |
|------+--------+-------+--------+-------------+--------+-------|
| 関連 | 商品   | 商品  |      1 |             |        |       |
| 属性 | 数量   | int   |        |             | AMOUNT | INT   |
| 属性 | 商品名 | token |        | 商品.名前   |        |       |
| 属性 | 単価   | money |        | 商品.定価   |        |       |
| 属性 | 総額   | money |        | 数量 * 単価 |        |       |
